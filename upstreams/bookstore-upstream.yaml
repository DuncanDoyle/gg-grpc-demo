apiVersion: gloo.solo.io/v1
kind: Upstream
metadata:
  name: bookstore-8080
  namespace: gloo-system
spec:
  kube:
    selector:
      app: bookstore
    serviceName: bookstore
    serviceNamespace: default
    servicePort: 8080
    serviceSpec:
      grpcJsonTranscoder:
        matchIncomingRequestRoute: true
        protoDescriptorBin: 
        services:
        - main.Bookstore
  useHttp2: true
status:
  statuses:
    gloo-system:
      reportedBy: gloo
      state: 1
